1. 准备开发环境，使用 Docker 启动 mysql，将 sql 语句导入数据库：
docker run -it -e MYSQL_ROOT_PASSWORD=Aa@6447985 -p 3306:3306 --name ginvue mysql:5.7
docker start -i ginvue # 第二次启动

2. 第一阶段改造步骤：（已完成）
    2.1 引入 go-spring web 组件，关闭 swagger 及默认 filter；(已完成)
    2.2 启动一个新的 web 容器，使用 application.properties；（已完成）
    2.3 增加一个重定向中间件，对于可迁移的接口使用重定向机制进行迁移；（已完成）
    2.4 给 go-spring 也配置跨域组件；（已完成）
    2.5 迁移接口到 go-spring，老接口先保留。（已完成）
    2.6 每迁移一个接口测试一下，推荐每次只保留一个迁移接口测试；（已完成）
    2.7 所有接口迁移完之后，打开所有迁移接口测试一次；（已完成）
    2.8 去掉原有的 web 服务，将 go-spring 的端口改成 8888；（已完成）
    2.9 大功告成！（已完成）

3. 第二阶段改造步骤：
    3.1 将所有的模块接口改造成 struct 的成员函数，示例见 api/v1/sys_user.go。（已完成）
    3.2 大功告成！（已完成）

4. 第三阶段改造步骤：
    4.1 将所有模块接口改造成 SpringWeb.HandlerFunc 的形式，示例参见 api/v1/sys_user.go。（已完成）
    4.2 大功告成！（已完成）

5. 第四阶段改造步骤：
    5.1 改造 global/response/response.go 接口的输入参数为 SpringWeb.WebContext。（已完成）
    5.2 改造 c.ShouldBindJSON 函数为 SpringWeb.WebContext.Bind 函数。（已完成）
    5.3 查漏补缺，v1 包里面清除对 gin.Context 的依赖。（已完成）
    5.4 大功告成！（已完成）

6. 第五阶段改造步骤：
    6.1 将 router 目录下的路由注册部分移动到 api/v1 目录每个对应的文件中，注意删除空文件；（已完成）
    6.2 将 api 改名为 controller，同时去掉 v1 子目录，此过程中确认修改点是否只有 main.go 一处；（已完成）
    6.3 大功告成！（已完成）

7. 第六阶段改造步骤：
    7.1 将 service 目录下的全局函数改成结构体方法，示例见 service/sys_api.go；（已完成）
    7.2 将 controller 目录下用到的 Service 改为注入的方式，示例见 controller/sys_api.go；（已完成）
    7.3 大功告成！（已完成）

8. 第七阶段改造步骤：
    8.1 将 middleware 目录下的中间件改为 SpringWeb.Filter 对象；（已完成）
    8.2 大功告成！（已完成）

9. 第八阶段改造步骤：
    9.1 将 MySQL 全局变量 GVA_DB 改成由 go-spring 框架创建，可以先通过 SpringBoot.Config() 把框架生
        成的 *gorm.DB 赋值给 GVA_DB，然后一步步改造引用 GVA_DB 的地方。（已完成）
    9.2 大功告成！（已完成）

10. 第九阶段改造步骤：
    10.1 将 Redis 全局变量 GVA_REDIS 改成由 go-spring 框架创建，可以先通过 SpringBoot.Config() 把框架
         生成的 *redis.Client 赋值给 GVA_REDIS，然后一步步改造引用 GVA_REDIS 的地方。
    10.2 大功告成！